// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/speech/v2/cloud_speech.proto

package com.google.cloud.speech.v2;

public interface RecognitionConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.speech.v2.RecognitionConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Automatically detect decoding parameters.
   * Preferred for supported formats.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.AutoDetectDecodingConfig auto_decoding_config = 7;</code>
   * @return Whether the autoDecodingConfig field is set.
   */
  boolean hasAutoDecodingConfig();
  /**
   * <pre>
   * Automatically detect decoding parameters.
   * Preferred for supported formats.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.AutoDetectDecodingConfig auto_decoding_config = 7;</code>
   * @return The autoDecodingConfig.
   */
  com.google.cloud.speech.v2.AutoDetectDecodingConfig getAutoDecodingConfig();
  /**
   * <pre>
   * Automatically detect decoding parameters.
   * Preferred for supported formats.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.AutoDetectDecodingConfig auto_decoding_config = 7;</code>
   */
  com.google.cloud.speech.v2.AutoDetectDecodingConfigOrBuilder getAutoDecodingConfigOrBuilder();

  /**
   * <pre>
   * Explicitly specified decoding parameters.
   * Required if using headerless PCM audio (linear16, mulaw, alaw).
   * </pre>
   *
   * <code>.google.cloud.speech.v2.ExplicitDecodingConfig explicit_decoding_config = 8;</code>
   * @return Whether the explicitDecodingConfig field is set.
   */
  boolean hasExplicitDecodingConfig();
  /**
   * <pre>
   * Explicitly specified decoding parameters.
   * Required if using headerless PCM audio (linear16, mulaw, alaw).
   * </pre>
   *
   * <code>.google.cloud.speech.v2.ExplicitDecodingConfig explicit_decoding_config = 8;</code>
   * @return The explicitDecodingConfig.
   */
  com.google.cloud.speech.v2.ExplicitDecodingConfig getExplicitDecodingConfig();
  /**
   * <pre>
   * Explicitly specified decoding parameters.
   * Required if using headerless PCM audio (linear16, mulaw, alaw).
   * </pre>
   *
   * <code>.google.cloud.speech.v2.ExplicitDecodingConfig explicit_decoding_config = 8;</code>
   */
  com.google.cloud.speech.v2.ExplicitDecodingConfigOrBuilder getExplicitDecodingConfigOrBuilder();

  /**
   * <pre>
   * Speech recognition features to enable.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.RecognitionFeatures features = 2;</code>
   * @return Whether the features field is set.
   */
  boolean hasFeatures();
  /**
   * <pre>
   * Speech recognition features to enable.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.RecognitionFeatures features = 2;</code>
   * @return The features.
   */
  com.google.cloud.speech.v2.RecognitionFeatures getFeatures();
  /**
   * <pre>
   * Speech recognition features to enable.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.RecognitionFeatures features = 2;</code>
   */
  com.google.cloud.speech.v2.RecognitionFeaturesOrBuilder getFeaturesOrBuilder();

  /**
   * <pre>
   * Speech adaptation context that weights recognizer predictions for specific
   * words and phrases.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.SpeechAdaptation adaptation = 6;</code>
   * @return Whether the adaptation field is set.
   */
  boolean hasAdaptation();
  /**
   * <pre>
   * Speech adaptation context that weights recognizer predictions for specific
   * words and phrases.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.SpeechAdaptation adaptation = 6;</code>
   * @return The adaptation.
   */
  com.google.cloud.speech.v2.SpeechAdaptation getAdaptation();
  /**
   * <pre>
   * Speech adaptation context that weights recognizer predictions for specific
   * words and phrases.
   * </pre>
   *
   * <code>.google.cloud.speech.v2.SpeechAdaptation adaptation = 6;</code>
   */
  com.google.cloud.speech.v2.SpeechAdaptationOrBuilder getAdaptationOrBuilder();

  public com.google.cloud.speech.v2.RecognitionConfig.DecodingConfigCase getDecodingConfigCase();
}
